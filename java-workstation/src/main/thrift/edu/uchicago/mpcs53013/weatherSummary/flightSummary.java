/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.weatherSummary;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-10")
public class flightSummary implements org.apache.thrift.TBase<flightSummary, flightSummary._Fields>, java.io.Serializable, Cloneable, Comparable<flightSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flightSummary");

  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("dest", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SCHED_DEP_FIELD_DESC = new org.apache.thrift.protocol.TField("sched_dep", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DEP_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("dep_delay", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ARR_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("arr_delay", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new flightSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new flightSummaryTupleSchemeFactory());
  }

  public short year; // required
  public byte month; // required
  public byte day; // required
  public String carrier; // required
  public String origin; // required
  public String dest; // required
  public long sched_dep; // required
  public long dep_delay; // required
  public long arr_delay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YEAR((short)1, "year"),
    MONTH((short)2, "month"),
    DAY((short)3, "day"),
    CARRIER((short)4, "carrier"),
    ORIGIN((short)5, "origin"),
    DEST((short)6, "dest"),
    SCHED_DEP((short)7, "sched_dep"),
    DEP_DELAY((short)8, "dep_delay"),
    ARR_DELAY((short)9, "arr_delay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YEAR
          return YEAR;
        case 2: // MONTH
          return MONTH;
        case 3: // DAY
          return DAY;
        case 4: // CARRIER
          return CARRIER;
        case 5: // ORIGIN
          return ORIGIN;
        case 6: // DEST
          return DEST;
        case 7: // SCHED_DEP
          return SCHED_DEP;
        case 8: // DEP_DELAY
          return DEP_DELAY;
        case 9: // ARR_DELAY
          return ARR_DELAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __MONTH_ISSET_ID = 1;
  private static final int __DAY_ISSET_ID = 2;
  private static final int __SCHED_DEP_ISSET_ID = 3;
  private static final int __DEP_DELAY_ISSET_ID = 4;
  private static final int __ARR_DELAY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CARRIER, new org.apache.thrift.meta_data.FieldMetaData("carrier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST, new org.apache.thrift.meta_data.FieldMetaData("dest", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHED_DEP, new org.apache.thrift.meta_data.FieldMetaData("sched_dep", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEP_DELAY, new org.apache.thrift.meta_data.FieldMetaData("dep_delay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARR_DELAY, new org.apache.thrift.meta_data.FieldMetaData("arr_delay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flightSummary.class, metaDataMap);
  }

  public flightSummary() {
  }

  public flightSummary(
    short year,
    byte month,
    byte day,
    String carrier,
    String origin,
    String dest,
    long sched_dep,
    long dep_delay,
    long arr_delay)
  {
    this();
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
    this.carrier = carrier;
    this.origin = origin;
    this.dest = dest;
    this.sched_dep = sched_dep;
    setSched_depIsSet(true);
    this.dep_delay = dep_delay;
    setDep_delayIsSet(true);
    this.arr_delay = arr_delay;
    setArr_delayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public flightSummary(flightSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.year = other.year;
    this.month = other.month;
    this.day = other.day;
    if (other.isSetCarrier()) {
      this.carrier = other.carrier;
    }
    if (other.isSetOrigin()) {
      this.origin = other.origin;
    }
    if (other.isSetDest()) {
      this.dest = other.dest;
    }
    this.sched_dep = other.sched_dep;
    this.dep_delay = other.dep_delay;
    this.arr_delay = other.arr_delay;
  }

  public flightSummary deepCopy() {
    return new flightSummary(this);
  }

  @Override
  public void clear() {
    setYearIsSet(false);
    this.year = 0;
    setMonthIsSet(false);
    this.month = 0;
    setDayIsSet(false);
    this.day = 0;
    this.carrier = null;
    this.origin = null;
    this.dest = null;
    setSched_depIsSet(false);
    this.sched_dep = 0;
    setDep_delayIsSet(false);
    this.dep_delay = 0;
    setArr_delayIsSet(false);
    this.arr_delay = 0;
  }

  public short getYear() {
    return this.year;
  }

  public flightSummary setYear(short year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public byte getMonth() {
    return this.month;
  }

  public flightSummary setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public byte getDay() {
    return this.day;
  }

  public flightSummary setDay(byte day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
  }

  public String getCarrier() {
    return this.carrier;
  }

  public flightSummary setCarrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  public void unsetCarrier() {
    this.carrier = null;
  }

  /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrier() {
    return this.carrier != null;
  }

  public void setCarrierIsSet(boolean value) {
    if (!value) {
      this.carrier = null;
    }
  }

  public String getOrigin() {
    return this.origin;
  }

  public flightSummary setOrigin(String origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public String getDest() {
    return this.dest;
  }

  public flightSummary setDest(String dest) {
    this.dest = dest;
    return this;
  }

  public void unsetDest() {
    this.dest = null;
  }

  /** Returns true if field dest is set (has been assigned a value) and false otherwise */
  public boolean isSetDest() {
    return this.dest != null;
  }

  public void setDestIsSet(boolean value) {
    if (!value) {
      this.dest = null;
    }
  }

  public long getSched_dep() {
    return this.sched_dep;
  }

  public flightSummary setSched_dep(long sched_dep) {
    this.sched_dep = sched_dep;
    setSched_depIsSet(true);
    return this;
  }

  public void unsetSched_dep() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCHED_DEP_ISSET_ID);
  }

  /** Returns true if field sched_dep is set (has been assigned a value) and false otherwise */
  public boolean isSetSched_dep() {
    return EncodingUtils.testBit(__isset_bitfield, __SCHED_DEP_ISSET_ID);
  }

  public void setSched_depIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCHED_DEP_ISSET_ID, value);
  }

  public long getDep_delay() {
    return this.dep_delay;
  }

  public flightSummary setDep_delay(long dep_delay) {
    this.dep_delay = dep_delay;
    setDep_delayIsSet(true);
    return this;
  }

  public void unsetDep_delay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEP_DELAY_ISSET_ID);
  }

  /** Returns true if field dep_delay is set (has been assigned a value) and false otherwise */
  public boolean isSetDep_delay() {
    return EncodingUtils.testBit(__isset_bitfield, __DEP_DELAY_ISSET_ID);
  }

  public void setDep_delayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEP_DELAY_ISSET_ID, value);
  }

  public long getArr_delay() {
    return this.arr_delay;
  }

  public flightSummary setArr_delay(long arr_delay) {
    this.arr_delay = arr_delay;
    setArr_delayIsSet(true);
    return this;
  }

  public void unsetArr_delay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARR_DELAY_ISSET_ID);
  }

  /** Returns true if field arr_delay is set (has been assigned a value) and false otherwise */
  public boolean isSetArr_delay() {
    return EncodingUtils.testBit(__isset_bitfield, __ARR_DELAY_ISSET_ID);
  }

  public void setArr_delayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARR_DELAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Byte)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Byte)value);
      }
      break;

    case CARRIER:
      if (value == null) {
        unsetCarrier();
      } else {
        setCarrier((String)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((String)value);
      }
      break;

    case DEST:
      if (value == null) {
        unsetDest();
      } else {
        setDest((String)value);
      }
      break;

    case SCHED_DEP:
      if (value == null) {
        unsetSched_dep();
      } else {
        setSched_dep((Long)value);
      }
      break;

    case DEP_DELAY:
      if (value == null) {
        unsetDep_delay();
      } else {
        setDep_delay((Long)value);
      }
      break;

    case ARR_DELAY:
      if (value == null) {
        unsetArr_delay();
      } else {
        setArr_delay((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YEAR:
      return Short.valueOf(getYear());

    case MONTH:
      return Byte.valueOf(getMonth());

    case DAY:
      return Byte.valueOf(getDay());

    case CARRIER:
      return getCarrier();

    case ORIGIN:
      return getOrigin();

    case DEST:
      return getDest();

    case SCHED_DEP:
      return Long.valueOf(getSched_dep());

    case DEP_DELAY:
      return Long.valueOf(getDep_delay());

    case ARR_DELAY:
      return Long.valueOf(getArr_delay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    case CARRIER:
      return isSetCarrier();
    case ORIGIN:
      return isSetOrigin();
    case DEST:
      return isSetDest();
    case SCHED_DEP:
      return isSetSched_dep();
    case DEP_DELAY:
      return isSetDep_delay();
    case ARR_DELAY:
      return isSetArr_delay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof flightSummary)
      return this.equals((flightSummary)that);
    return false;
  }

  public boolean equals(flightSummary that) {
    if (that == null)
      return false;

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (this.day != that.day)
        return false;
    }

    boolean this_present_carrier = true && this.isSetCarrier();
    boolean that_present_carrier = true && that.isSetCarrier();
    if (this_present_carrier || that_present_carrier) {
      if (!(this_present_carrier && that_present_carrier))
        return false;
      if (!this.carrier.equals(that.carrier))
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_dest = true && this.isSetDest();
    boolean that_present_dest = true && that.isSetDest();
    if (this_present_dest || that_present_dest) {
      if (!(this_present_dest && that_present_dest))
        return false;
      if (!this.dest.equals(that.dest))
        return false;
    }

    boolean this_present_sched_dep = true;
    boolean that_present_sched_dep = true;
    if (this_present_sched_dep || that_present_sched_dep) {
      if (!(this_present_sched_dep && that_present_sched_dep))
        return false;
      if (this.sched_dep != that.sched_dep)
        return false;
    }

    boolean this_present_dep_delay = true;
    boolean that_present_dep_delay = true;
    if (this_present_dep_delay || that_present_dep_delay) {
      if (!(this_present_dep_delay && that_present_dep_delay))
        return false;
      if (this.dep_delay != that.dep_delay)
        return false;
    }

    boolean this_present_arr_delay = true;
    boolean that_present_arr_delay = true;
    if (this_present_arr_delay || that_present_arr_delay) {
      if (!(this_present_arr_delay && that_present_arr_delay))
        return false;
      if (this.arr_delay != that.arr_delay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_year = true;
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_month = true;
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_day = true;
    list.add(present_day);
    if (present_day)
      list.add(day);

    boolean present_carrier = true && (isSetCarrier());
    list.add(present_carrier);
    if (present_carrier)
      list.add(carrier);

    boolean present_origin = true && (isSetOrigin());
    list.add(present_origin);
    if (present_origin)
      list.add(origin);

    boolean present_dest = true && (isSetDest());
    list.add(present_dest);
    if (present_dest)
      list.add(dest);

    boolean present_sched_dep = true;
    list.add(present_sched_dep);
    if (present_sched_dep)
      list.add(sched_dep);

    boolean present_dep_delay = true;
    list.add(present_dep_delay);
    if (present_dep_delay)
      list.add(dep_delay);

    boolean present_arr_delay = true;
    list.add(present_arr_delay);
    if (present_arr_delay)
      list.add(arr_delay);

    return list.hashCode();
  }

  @Override
  public int compareTo(flightSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrier()).compareTo(other.isSetCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier, other.carrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDest()).compareTo(other.isSetDest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest, other.dest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSched_dep()).compareTo(other.isSetSched_dep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSched_dep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sched_dep, other.sched_dep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDep_delay()).compareTo(other.isSetDep_delay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDep_delay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dep_delay, other.dep_delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArr_delay()).compareTo(other.isSetArr_delay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArr_delay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arr_delay, other.arr_delay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("flightSummary(");
    boolean first = true;

    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    sb.append(this.day);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carrier:");
    if (this.carrier == null) {
      sb.append("null");
    } else {
      sb.append(this.carrier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dest:");
    if (this.dest == null) {
      sb.append("null");
    } else {
      sb.append(this.dest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sched_dep:");
    sb.append(this.sched_dep);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dep_delay:");
    sb.append(this.dep_delay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arr_delay:");
    sb.append(this.arr_delay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'month' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'day' because it's a primitive and you chose the non-beans generator.
    if (carrier == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'carrier' was not present! Struct: " + toString());
    }
    if (origin == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'origin' was not present! Struct: " + toString());
    }
    if (dest == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dest' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sched_dep' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dep_delay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'arr_delay' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class flightSummaryStandardSchemeFactory implements SchemeFactory {
    public flightSummaryStandardScheme getScheme() {
      return new flightSummaryStandardScheme();
    }
  }

  private static class flightSummaryStandardScheme extends StandardScheme<flightSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, flightSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.year = iprot.readI16();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.month = iprot.readByte();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.day = iprot.readByte();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carrier = iprot.readString();
              struct.setCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dest = iprot.readString();
              struct.setDestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCHED_DEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sched_dep = iprot.readI64();
              struct.setSched_depIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEP_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dep_delay = iprot.readI64();
              struct.setDep_delayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ARR_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.arr_delay = iprot.readI64();
              struct.setArr_delayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'month' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'day' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSched_dep()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sched_dep' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDep_delay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dep_delay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetArr_delay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'arr_delay' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, flightSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI16(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeByte(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeByte(struct.day);
      oprot.writeFieldEnd();
      if (struct.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeString(struct.carrier);
        oprot.writeFieldEnd();
      }
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeString(struct.origin);
        oprot.writeFieldEnd();
      }
      if (struct.dest != null) {
        oprot.writeFieldBegin(DEST_FIELD_DESC);
        oprot.writeString(struct.dest);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCHED_DEP_FIELD_DESC);
      oprot.writeI64(struct.sched_dep);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEP_DELAY_FIELD_DESC);
      oprot.writeI64(struct.dep_delay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARR_DELAY_FIELD_DESC);
      oprot.writeI64(struct.arr_delay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class flightSummaryTupleSchemeFactory implements SchemeFactory {
    public flightSummaryTupleScheme getScheme() {
      return new flightSummaryTupleScheme();
    }
  }

  private static class flightSummaryTupleScheme extends TupleScheme<flightSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, flightSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.year);
      oprot.writeByte(struct.month);
      oprot.writeByte(struct.day);
      oprot.writeString(struct.carrier);
      oprot.writeString(struct.origin);
      oprot.writeString(struct.dest);
      oprot.writeI64(struct.sched_dep);
      oprot.writeI64(struct.dep_delay);
      oprot.writeI64(struct.arr_delay);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, flightSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.year = iprot.readI16();
      struct.setYearIsSet(true);
      struct.month = iprot.readByte();
      struct.setMonthIsSet(true);
      struct.day = iprot.readByte();
      struct.setDayIsSet(true);
      struct.carrier = iprot.readString();
      struct.setCarrierIsSet(true);
      struct.origin = iprot.readString();
      struct.setOriginIsSet(true);
      struct.dest = iprot.readString();
      struct.setDestIsSet(true);
      struct.sched_dep = iprot.readI64();
      struct.setSched_depIsSet(true);
      struct.dep_delay = iprot.readI64();
      struct.setDep_delayIsSet(true);
      struct.arr_delay = iprot.readI64();
      struct.setArr_delayIsSet(true);
    }
  }

}

