/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.weatherSummary;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-10")
public class WeatherSummary implements org.apache.thrift.TBase<WeatherSummary, WeatherSummary._Fields>, java.io.Serializable, Cloneable, Comparable<WeatherSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WeatherSummary");

  private static final org.apache.thrift.protocol.TField STATION_FIELD_DESC = new org.apache.thrift.protocol.TField("station", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField MEAN_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("meanTemperature", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEAN_VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("meanVisibility", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MEAN_WIND_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("meanWindSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FOG_FIELD_DESC = new org.apache.thrift.protocol.TField("fog", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField RAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rain", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField SNOW_FIELD_DESC = new org.apache.thrift.protocol.TField("snow", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField HAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("hail", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField THUNDER_FIELD_DESC = new org.apache.thrift.protocol.TField("thunder", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField TORNADO_FIELD_DESC = new org.apache.thrift.protocol.TField("tornado", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WeatherSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WeatherSummaryTupleSchemeFactory());
  }

  public int station; // required
  public short year; // required
  public byte month; // required
  public byte day; // required
  public double meanTemperature; // required
  public double meanVisibility; // required
  public double meanWindSpeed; // required
  public boolean fog; // required
  public boolean rain; // required
  public boolean snow; // required
  public boolean hail; // required
  public boolean thunder; // required
  public boolean tornado; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATION((short)1, "station"),
    YEAR((short)2, "year"),
    MONTH((short)3, "month"),
    DAY((short)4, "day"),
    MEAN_TEMPERATURE((short)5, "meanTemperature"),
    MEAN_VISIBILITY((short)6, "meanVisibility"),
    MEAN_WIND_SPEED((short)7, "meanWindSpeed"),
    FOG((short)8, "fog"),
    RAIN((short)9, "rain"),
    SNOW((short)10, "snow"),
    HAIL((short)11, "hail"),
    THUNDER((short)12, "thunder"),
    TORNADO((short)13, "tornado");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATION
          return STATION;
        case 2: // YEAR
          return YEAR;
        case 3: // MONTH
          return MONTH;
        case 4: // DAY
          return DAY;
        case 5: // MEAN_TEMPERATURE
          return MEAN_TEMPERATURE;
        case 6: // MEAN_VISIBILITY
          return MEAN_VISIBILITY;
        case 7: // MEAN_WIND_SPEED
          return MEAN_WIND_SPEED;
        case 8: // FOG
          return FOG;
        case 9: // RAIN
          return RAIN;
        case 10: // SNOW
          return SNOW;
        case 11: // HAIL
          return HAIL;
        case 12: // THUNDER
          return THUNDER;
        case 13: // TORNADO
          return TORNADO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATION_ISSET_ID = 0;
  private static final int __YEAR_ISSET_ID = 1;
  private static final int __MONTH_ISSET_ID = 2;
  private static final int __DAY_ISSET_ID = 3;
  private static final int __MEANTEMPERATURE_ISSET_ID = 4;
  private static final int __MEANVISIBILITY_ISSET_ID = 5;
  private static final int __MEANWINDSPEED_ISSET_ID = 6;
  private static final int __FOG_ISSET_ID = 7;
  private static final int __RAIN_ISSET_ID = 8;
  private static final int __SNOW_ISSET_ID = 9;
  private static final int __HAIL_ISSET_ID = 10;
  private static final int __THUNDER_ISSET_ID = 11;
  private static final int __TORNADO_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATION, new org.apache.thrift.meta_data.FieldMetaData("station", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MEAN_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("meanTemperature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEAN_VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("meanVisibility", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEAN_WIND_SPEED, new org.apache.thrift.meta_data.FieldMetaData("meanWindSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FOG, new org.apache.thrift.meta_data.FieldMetaData("fog", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RAIN, new org.apache.thrift.meta_data.FieldMetaData("rain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SNOW, new org.apache.thrift.meta_data.FieldMetaData("snow", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAIL, new org.apache.thrift.meta_data.FieldMetaData("hail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.THUNDER, new org.apache.thrift.meta_data.FieldMetaData("thunder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TORNADO, new org.apache.thrift.meta_data.FieldMetaData("tornado", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WeatherSummary.class, metaDataMap);
  }

  public WeatherSummary() {
  }

  public WeatherSummary(
    int station,
    short year,
    byte month,
    byte day,
    double meanTemperature,
    double meanVisibility,
    double meanWindSpeed,
    boolean fog,
    boolean rain,
    boolean snow,
    boolean hail,
    boolean thunder,
    boolean tornado)
  {
    this();
    this.station = station;
    setStationIsSet(true);
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
    this.meanTemperature = meanTemperature;
    setMeanTemperatureIsSet(true);
    this.meanVisibility = meanVisibility;
    setMeanVisibilityIsSet(true);
    this.meanWindSpeed = meanWindSpeed;
    setMeanWindSpeedIsSet(true);
    this.fog = fog;
    setFogIsSet(true);
    this.rain = rain;
    setRainIsSet(true);
    this.snow = snow;
    setSnowIsSet(true);
    this.hail = hail;
    setHailIsSet(true);
    this.thunder = thunder;
    setThunderIsSet(true);
    this.tornado = tornado;
    setTornadoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WeatherSummary(WeatherSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.station = other.station;
    this.year = other.year;
    this.month = other.month;
    this.day = other.day;
    this.meanTemperature = other.meanTemperature;
    this.meanVisibility = other.meanVisibility;
    this.meanWindSpeed = other.meanWindSpeed;
    this.fog = other.fog;
    this.rain = other.rain;
    this.snow = other.snow;
    this.hail = other.hail;
    this.thunder = other.thunder;
    this.tornado = other.tornado;
  }

  public WeatherSummary deepCopy() {
    return new WeatherSummary(this);
  }

  @Override
  public void clear() {
    setStationIsSet(false);
    this.station = 0;
    setYearIsSet(false);
    this.year = 0;
    setMonthIsSet(false);
    this.month = 0;
    setDayIsSet(false);
    this.day = 0;
    setMeanTemperatureIsSet(false);
    this.meanTemperature = 0.0;
    setMeanVisibilityIsSet(false);
    this.meanVisibility = 0.0;
    setMeanWindSpeedIsSet(false);
    this.meanWindSpeed = 0.0;
    setFogIsSet(false);
    this.fog = false;
    setRainIsSet(false);
    this.rain = false;
    setSnowIsSet(false);
    this.snow = false;
    setHailIsSet(false);
    this.hail = false;
    setThunderIsSet(false);
    this.thunder = false;
    setTornadoIsSet(false);
    this.tornado = false;
  }

  public int getStation() {
    return this.station;
  }

  public WeatherSummary setStation(int station) {
    this.station = station;
    setStationIsSet(true);
    return this;
  }

  public void unsetStation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATION_ISSET_ID);
  }

  /** Returns true if field station is set (has been assigned a value) and false otherwise */
  public boolean isSetStation() {
    return EncodingUtils.testBit(__isset_bitfield, __STATION_ISSET_ID);
  }

  public void setStationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATION_ISSET_ID, value);
  }

  public short getYear() {
    return this.year;
  }

  public WeatherSummary setYear(short year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public byte getMonth() {
    return this.month;
  }

  public WeatherSummary setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public byte getDay() {
    return this.day;
  }

  public WeatherSummary setDay(byte day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
  }

  public double getMeanTemperature() {
    return this.meanTemperature;
  }

  public WeatherSummary setMeanTemperature(double meanTemperature) {
    this.meanTemperature = meanTemperature;
    setMeanTemperatureIsSet(true);
    return this;
  }

  public void unsetMeanTemperature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEANTEMPERATURE_ISSET_ID);
  }

  /** Returns true if field meanTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetMeanTemperature() {
    return EncodingUtils.testBit(__isset_bitfield, __MEANTEMPERATURE_ISSET_ID);
  }

  public void setMeanTemperatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEANTEMPERATURE_ISSET_ID, value);
  }

  public double getMeanVisibility() {
    return this.meanVisibility;
  }

  public WeatherSummary setMeanVisibility(double meanVisibility) {
    this.meanVisibility = meanVisibility;
    setMeanVisibilityIsSet(true);
    return this;
  }

  public void unsetMeanVisibility() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEANVISIBILITY_ISSET_ID);
  }

  /** Returns true if field meanVisibility is set (has been assigned a value) and false otherwise */
  public boolean isSetMeanVisibility() {
    return EncodingUtils.testBit(__isset_bitfield, __MEANVISIBILITY_ISSET_ID);
  }

  public void setMeanVisibilityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEANVISIBILITY_ISSET_ID, value);
  }

  public double getMeanWindSpeed() {
    return this.meanWindSpeed;
  }

  public WeatherSummary setMeanWindSpeed(double meanWindSpeed) {
    this.meanWindSpeed = meanWindSpeed;
    setMeanWindSpeedIsSet(true);
    return this;
  }

  public void unsetMeanWindSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEANWINDSPEED_ISSET_ID);
  }

  /** Returns true if field meanWindSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetMeanWindSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __MEANWINDSPEED_ISSET_ID);
  }

  public void setMeanWindSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEANWINDSPEED_ISSET_ID, value);
  }

  public boolean isFog() {
    return this.fog;
  }

  public WeatherSummary setFog(boolean fog) {
    this.fog = fog;
    setFogIsSet(true);
    return this;
  }

  public void unsetFog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOG_ISSET_ID);
  }

  /** Returns true if field fog is set (has been assigned a value) and false otherwise */
  public boolean isSetFog() {
    return EncodingUtils.testBit(__isset_bitfield, __FOG_ISSET_ID);
  }

  public void setFogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOG_ISSET_ID, value);
  }

  public boolean isRain() {
    return this.rain;
  }

  public WeatherSummary setRain(boolean rain) {
    this.rain = rain;
    setRainIsSet(true);
    return this;
  }

  public void unsetRain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  /** Returns true if field rain is set (has been assigned a value) and false otherwise */
  public boolean isSetRain() {
    return EncodingUtils.testBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  public void setRainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAIN_ISSET_ID, value);
  }

  public boolean isSnow() {
    return this.snow;
  }

  public WeatherSummary setSnow(boolean snow) {
    this.snow = snow;
    setSnowIsSet(true);
    return this;
  }

  public void unsetSnow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNOW_ISSET_ID);
  }

  /** Returns true if field snow is set (has been assigned a value) and false otherwise */
  public boolean isSetSnow() {
    return EncodingUtils.testBit(__isset_bitfield, __SNOW_ISSET_ID);
  }

  public void setSnowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNOW_ISSET_ID, value);
  }

  public boolean isHail() {
    return this.hail;
  }

  public WeatherSummary setHail(boolean hail) {
    this.hail = hail;
    setHailIsSet(true);
    return this;
  }

  public void unsetHail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAIL_ISSET_ID);
  }

  /** Returns true if field hail is set (has been assigned a value) and false otherwise */
  public boolean isSetHail() {
    return EncodingUtils.testBit(__isset_bitfield, __HAIL_ISSET_ID);
  }

  public void setHailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAIL_ISSET_ID, value);
  }

  public boolean isThunder() {
    return this.thunder;
  }

  public WeatherSummary setThunder(boolean thunder) {
    this.thunder = thunder;
    setThunderIsSet(true);
    return this;
  }

  public void unsetThunder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THUNDER_ISSET_ID);
  }

  /** Returns true if field thunder is set (has been assigned a value) and false otherwise */
  public boolean isSetThunder() {
    return EncodingUtils.testBit(__isset_bitfield, __THUNDER_ISSET_ID);
  }

  public void setThunderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THUNDER_ISSET_ID, value);
  }

  public boolean isTornado() {
    return this.tornado;
  }

  public WeatherSummary setTornado(boolean tornado) {
    this.tornado = tornado;
    setTornadoIsSet(true);
    return this;
  }

  public void unsetTornado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TORNADO_ISSET_ID);
  }

  /** Returns true if field tornado is set (has been assigned a value) and false otherwise */
  public boolean isSetTornado() {
    return EncodingUtils.testBit(__isset_bitfield, __TORNADO_ISSET_ID);
  }

  public void setTornadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TORNADO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATION:
      if (value == null) {
        unsetStation();
      } else {
        setStation((Integer)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Byte)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Byte)value);
      }
      break;

    case MEAN_TEMPERATURE:
      if (value == null) {
        unsetMeanTemperature();
      } else {
        setMeanTemperature((Double)value);
      }
      break;

    case MEAN_VISIBILITY:
      if (value == null) {
        unsetMeanVisibility();
      } else {
        setMeanVisibility((Double)value);
      }
      break;

    case MEAN_WIND_SPEED:
      if (value == null) {
        unsetMeanWindSpeed();
      } else {
        setMeanWindSpeed((Double)value);
      }
      break;

    case FOG:
      if (value == null) {
        unsetFog();
      } else {
        setFog((Boolean)value);
      }
      break;

    case RAIN:
      if (value == null) {
        unsetRain();
      } else {
        setRain((Boolean)value);
      }
      break;

    case SNOW:
      if (value == null) {
        unsetSnow();
      } else {
        setSnow((Boolean)value);
      }
      break;

    case HAIL:
      if (value == null) {
        unsetHail();
      } else {
        setHail((Boolean)value);
      }
      break;

    case THUNDER:
      if (value == null) {
        unsetThunder();
      } else {
        setThunder((Boolean)value);
      }
      break;

    case TORNADO:
      if (value == null) {
        unsetTornado();
      } else {
        setTornado((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATION:
      return Integer.valueOf(getStation());

    case YEAR:
      return Short.valueOf(getYear());

    case MONTH:
      return Byte.valueOf(getMonth());

    case DAY:
      return Byte.valueOf(getDay());

    case MEAN_TEMPERATURE:
      return Double.valueOf(getMeanTemperature());

    case MEAN_VISIBILITY:
      return Double.valueOf(getMeanVisibility());

    case MEAN_WIND_SPEED:
      return Double.valueOf(getMeanWindSpeed());

    case FOG:
      return Boolean.valueOf(isFog());

    case RAIN:
      return Boolean.valueOf(isRain());

    case SNOW:
      return Boolean.valueOf(isSnow());

    case HAIL:
      return Boolean.valueOf(isHail());

    case THUNDER:
      return Boolean.valueOf(isThunder());

    case TORNADO:
      return Boolean.valueOf(isTornado());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATION:
      return isSetStation();
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    case MEAN_TEMPERATURE:
      return isSetMeanTemperature();
    case MEAN_VISIBILITY:
      return isSetMeanVisibility();
    case MEAN_WIND_SPEED:
      return isSetMeanWindSpeed();
    case FOG:
      return isSetFog();
    case RAIN:
      return isSetRain();
    case SNOW:
      return isSetSnow();
    case HAIL:
      return isSetHail();
    case THUNDER:
      return isSetThunder();
    case TORNADO:
      return isSetTornado();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WeatherSummary)
      return this.equals((WeatherSummary)that);
    return false;
  }

  public boolean equals(WeatherSummary that) {
    if (that == null)
      return false;

    boolean this_present_station = true;
    boolean that_present_station = true;
    if (this_present_station || that_present_station) {
      if (!(this_present_station && that_present_station))
        return false;
      if (this.station != that.station)
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (this.day != that.day)
        return false;
    }

    boolean this_present_meanTemperature = true;
    boolean that_present_meanTemperature = true;
    if (this_present_meanTemperature || that_present_meanTemperature) {
      if (!(this_present_meanTemperature && that_present_meanTemperature))
        return false;
      if (this.meanTemperature != that.meanTemperature)
        return false;
    }

    boolean this_present_meanVisibility = true;
    boolean that_present_meanVisibility = true;
    if (this_present_meanVisibility || that_present_meanVisibility) {
      if (!(this_present_meanVisibility && that_present_meanVisibility))
        return false;
      if (this.meanVisibility != that.meanVisibility)
        return false;
    }

    boolean this_present_meanWindSpeed = true;
    boolean that_present_meanWindSpeed = true;
    if (this_present_meanWindSpeed || that_present_meanWindSpeed) {
      if (!(this_present_meanWindSpeed && that_present_meanWindSpeed))
        return false;
      if (this.meanWindSpeed != that.meanWindSpeed)
        return false;
    }

    boolean this_present_fog = true;
    boolean that_present_fog = true;
    if (this_present_fog || that_present_fog) {
      if (!(this_present_fog && that_present_fog))
        return false;
      if (this.fog != that.fog)
        return false;
    }

    boolean this_present_rain = true;
    boolean that_present_rain = true;
    if (this_present_rain || that_present_rain) {
      if (!(this_present_rain && that_present_rain))
        return false;
      if (this.rain != that.rain)
        return false;
    }

    boolean this_present_snow = true;
    boolean that_present_snow = true;
    if (this_present_snow || that_present_snow) {
      if (!(this_present_snow && that_present_snow))
        return false;
      if (this.snow != that.snow)
        return false;
    }

    boolean this_present_hail = true;
    boolean that_present_hail = true;
    if (this_present_hail || that_present_hail) {
      if (!(this_present_hail && that_present_hail))
        return false;
      if (this.hail != that.hail)
        return false;
    }

    boolean this_present_thunder = true;
    boolean that_present_thunder = true;
    if (this_present_thunder || that_present_thunder) {
      if (!(this_present_thunder && that_present_thunder))
        return false;
      if (this.thunder != that.thunder)
        return false;
    }

    boolean this_present_tornado = true;
    boolean that_present_tornado = true;
    if (this_present_tornado || that_present_tornado) {
      if (!(this_present_tornado && that_present_tornado))
        return false;
      if (this.tornado != that.tornado)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_station = true;
    list.add(present_station);
    if (present_station)
      list.add(station);

    boolean present_year = true;
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_month = true;
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_day = true;
    list.add(present_day);
    if (present_day)
      list.add(day);

    boolean present_meanTemperature = true;
    list.add(present_meanTemperature);
    if (present_meanTemperature)
      list.add(meanTemperature);

    boolean present_meanVisibility = true;
    list.add(present_meanVisibility);
    if (present_meanVisibility)
      list.add(meanVisibility);

    boolean present_meanWindSpeed = true;
    list.add(present_meanWindSpeed);
    if (present_meanWindSpeed)
      list.add(meanWindSpeed);

    boolean present_fog = true;
    list.add(present_fog);
    if (present_fog)
      list.add(fog);

    boolean present_rain = true;
    list.add(present_rain);
    if (present_rain)
      list.add(rain);

    boolean present_snow = true;
    list.add(present_snow);
    if (present_snow)
      list.add(snow);

    boolean present_hail = true;
    list.add(present_hail);
    if (present_hail)
      list.add(hail);

    boolean present_thunder = true;
    list.add(present_thunder);
    if (present_thunder)
      list.add(thunder);

    boolean present_tornado = true;
    list.add(present_tornado);
    if (present_tornado)
      list.add(tornado);

    return list.hashCode();
  }

  @Override
  public int compareTo(WeatherSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStation()).compareTo(other.isSetStation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.station, other.station);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeanTemperature()).compareTo(other.isSetMeanTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeanTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meanTemperature, other.meanTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeanVisibility()).compareTo(other.isSetMeanVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeanVisibility()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meanVisibility, other.meanVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeanWindSpeed()).compareTo(other.isSetMeanWindSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeanWindSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meanWindSpeed, other.meanWindSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFog()).compareTo(other.isSetFog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fog, other.fog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRain()).compareTo(other.isSetRain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rain, other.rain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnow()).compareTo(other.isSetSnow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snow, other.snow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHail()).compareTo(other.isSetHail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hail, other.hail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThunder()).compareTo(other.isSetThunder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThunder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thunder, other.thunder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTornado()).compareTo(other.isSetTornado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTornado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tornado, other.tornado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WeatherSummary(");
    boolean first = true;

    sb.append("station:");
    sb.append(this.station);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    sb.append(this.day);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meanTemperature:");
    sb.append(this.meanTemperature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meanVisibility:");
    sb.append(this.meanVisibility);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meanWindSpeed:");
    sb.append(this.meanWindSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fog:");
    sb.append(this.fog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rain:");
    sb.append(this.rain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("snow:");
    sb.append(this.snow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hail:");
    sb.append(this.hail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thunder:");
    sb.append(this.thunder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tornado:");
    sb.append(this.tornado);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'station' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'month' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'day' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'meanTemperature' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'meanVisibility' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'meanWindSpeed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fog' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rain' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'snow' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'hail' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'thunder' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tornado' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WeatherSummaryStandardSchemeFactory implements SchemeFactory {
    public WeatherSummaryStandardScheme getScheme() {
      return new WeatherSummaryStandardScheme();
    }
  }

  private static class WeatherSummaryStandardScheme extends StandardScheme<WeatherSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WeatherSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.station = iprot.readI32();
              struct.setStationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.year = iprot.readI16();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.month = iprot.readByte();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.day = iprot.readByte();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEAN_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.meanTemperature = iprot.readDouble();
              struct.setMeanTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEAN_VISIBILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.meanVisibility = iprot.readDouble();
              struct.setMeanVisibilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEAN_WIND_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.meanWindSpeed = iprot.readDouble();
              struct.setMeanWindSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fog = iprot.readBool();
              struct.setFogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rain = iprot.readBool();
              struct.setRainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SNOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.snow = iprot.readBool();
              struct.setSnowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hail = iprot.readBool();
              struct.setHailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THUNDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.thunder = iprot.readBool();
              struct.setThunderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TORNADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tornado = iprot.readBool();
              struct.setTornadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'station' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'month' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'day' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMeanTemperature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meanTemperature' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMeanVisibility()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meanVisibility' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMeanWindSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meanWindSpeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFog()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fog' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRain()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rain' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSnow()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'snow' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHail()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hail' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetThunder()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'thunder' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTornado()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tornado' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WeatherSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATION_FIELD_DESC);
      oprot.writeI32(struct.station);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI16(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeByte(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeByte(struct.day);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_TEMPERATURE_FIELD_DESC);
      oprot.writeDouble(struct.meanTemperature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_VISIBILITY_FIELD_DESC);
      oprot.writeDouble(struct.meanVisibility);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_WIND_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.meanWindSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOG_FIELD_DESC);
      oprot.writeBool(struct.fog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAIN_FIELD_DESC);
      oprot.writeBool(struct.rain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SNOW_FIELD_DESC);
      oprot.writeBool(struct.snow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAIL_FIELD_DESC);
      oprot.writeBool(struct.hail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THUNDER_FIELD_DESC);
      oprot.writeBool(struct.thunder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TORNADO_FIELD_DESC);
      oprot.writeBool(struct.tornado);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WeatherSummaryTupleSchemeFactory implements SchemeFactory {
    public WeatherSummaryTupleScheme getScheme() {
      return new WeatherSummaryTupleScheme();
    }
  }

  private static class WeatherSummaryTupleScheme extends TupleScheme<WeatherSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WeatherSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.station);
      oprot.writeI16(struct.year);
      oprot.writeByte(struct.month);
      oprot.writeByte(struct.day);
      oprot.writeDouble(struct.meanTemperature);
      oprot.writeDouble(struct.meanVisibility);
      oprot.writeDouble(struct.meanWindSpeed);
      oprot.writeBool(struct.fog);
      oprot.writeBool(struct.rain);
      oprot.writeBool(struct.snow);
      oprot.writeBool(struct.hail);
      oprot.writeBool(struct.thunder);
      oprot.writeBool(struct.tornado);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WeatherSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.station = iprot.readI32();
      struct.setStationIsSet(true);
      struct.year = iprot.readI16();
      struct.setYearIsSet(true);
      struct.month = iprot.readByte();
      struct.setMonthIsSet(true);
      struct.day = iprot.readByte();
      struct.setDayIsSet(true);
      struct.meanTemperature = iprot.readDouble();
      struct.setMeanTemperatureIsSet(true);
      struct.meanVisibility = iprot.readDouble();
      struct.setMeanVisibilityIsSet(true);
      struct.meanWindSpeed = iprot.readDouble();
      struct.setMeanWindSpeedIsSet(true);
      struct.fog = iprot.readBool();
      struct.setFogIsSet(true);
      struct.rain = iprot.readBool();
      struct.setRainIsSet(true);
      struct.snow = iprot.readBool();
      struct.setSnowIsSet(true);
      struct.hail = iprot.readBool();
      struct.setHailIsSet(true);
      struct.thunder = iprot.readBool();
      struct.setThunderIsSet(true);
      struct.tornado = iprot.readBool();
      struct.setTornadoIsSet(true);
    }
  }

}

